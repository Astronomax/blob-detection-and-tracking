#ifndef BLOB_TRACKER_HUNGARIAN_HPP
#define BLOB_TRACKER_HUNGARIAN_HPP

#include <vector>
#include <boost/numeric/ublas/matrix.hpp>

namespace hungarian {
	constexpr static const size_t MAXN = 500;	/*!< Максмальное количество объектов в одной доле. */

	/**
	 * \brief Реализация Венгерского алгоритма, решающего задачу о назначениях за O(M * N^2)
	 * (взвешенное парсочетание мимнимального веса в двудольном графе).
	 * 
	 * \param g 	Матрица смежности двудольного графа. g[u][v] - вес ребра между вершинами u, v.
	 * \return	ret[i] = -1,	если для вершины i отсутствует соответствующая вершина правой доли.
	 * 		ret[i] = j, 	если вершине i левой доли поставлена в соответствие вершина j правой доли. 
	 */
	std::vector<ptrdiff_t>
	hungarian(const boost::numeric::ublas::matrix<float> &g);

	/**
	 * \brief Реализация Венгерского алгоритма, решающего задачу о назначениях за O(M * N^2)
	 * (взвешенное парсочетание мимнимального веса в двудольном графе). Данная версия алгоритма
	 * включает в себя дополнительное ограничение - между некотороми парами вершин левой и правой
	 * долей ребро отсутствует.
	 * 
	 * \param g	Матрица смежности двудольного графа. 
	 * 		g[u][v] - вес ребра между вершинами u, v.
	 * \param c	Матрица, задающая наличие/отсутствие ребра между парой вершин.
	 * 		c[y][x] = true, если вершины y и x соединены ребром.
	 * 		c[y][x] = false, если ребро отсутствует (g[y][x] игнорируется и может принимать любое значение).
	 * \return	ret[i] = -1,	если для вершины i отсутствует соответствующая вершина правой доли.
	 * 		ret[i] = j, 	если вершине i левой доли поставлена в соответствие вершина j правой доли. 
	 */
	std::vector<ptrdiff_t>
	hungarian(boost::numeric::ublas::matrix<float> g,
		const boost::numeric::ublas::matrix<bool> &c);
};

#endif //BLOB_TRACKER_HUNGARIAN_HPP
